BSP :
TARGET  := adc_inc
WARN    := -W -Wall -Wstrict-prototypes -Wmissing-prototypes
INCLUDE := -isystem /lib/modules/`uname -r`/build/include
CFLAGS  := -O2 -DMODULE -D__KERNEL__ ${WARN} ${INCLUDE}
CC      := gcc-3.0

make -C <full path of kernel source tree> SUBDIRS=<full path of module code> modules
gcc -DMODULE -D__KERNEL__ -isystem /lib/modules/$(uname -r)/build/include -c hello.c -o hello.ko

KERNEL_VERSION="3.8.13.28-04515-gf601d7e-dirty"
MODULES_INSTALL_PATH="/home/dharmender/Desktop/kernel_modules"
NUM_PARALLEL_JOB=( 'nproc' * 2 )
ARCH="arm"
CROSS_COMPILE="/opt/tooling/codesourcery/MGC-2013.11-73-gcc-4.8.1/Sourcery_CodeBench_for_ARM_GNU_Linux/bin/arm-none-linux-gnueabi-"
or
#make ARCH=arm imx_v6_v7_defconfig or x86_platform_production_defconfig
#make ARCH=arm CROSS_COMPILE=/opt/tooling/codesourcery/MGC-2013.11-73-gcc-4.8.1/Sourcery_CodeBench_for_ARM_GNU_Linux/bin/arm-none-linux-gnueabi- menuconfig
make -j${NUM_PARALLEL_JOB} ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE LOADADDR=0x12000000 uImage
make -j${NUM_PARALLEL_JOB} ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE modules
make -j${NUM_PARALLEL_JOB} ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE dtbs

cp arch/arm/boot/uImage ${VIEW_PATH}/${KERNEL_IMAGE_PATH}
make modules_install ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE INSTALL_MOD_PATH=$MODULES_INSTALL_PATH > /dev/null

by default compiled[installed] modules dir is INSTALL_MOD_PATH =/lib/modules/[kernel version + CONFIG_LOCALVERSION]/

cd $MODULES_INSTALL_PATH/lib/modules/
find . -iname "*\.ko" | xargs ${CROSS_COMPILE}strip --strip-debug [ Remove debugging symbols to reduce size of modules]
Note : Stripping debugging symbols with strip --strip-debug *.ko (= strip -g *.ko) is safe. 
The kernel makefile does it for you if you run make INSTALL_MOD_STRIP=1 modules_install.

echo "Creating modules tarball..."
tar -cjvf "${KERNEL_VERSION}.tar.bz2" "${KERNEL_VERSION}" > /dev/null

kernel space :
lspci: list PCI devices
lsusb: list USB devices
fdisk: partition disk
hdparm: set disk parameters
ifconfig, iwconfig: configure network interface
dmesg, insmod, modprobe, rmmod, lsmod: manage modules
halt, reboot: control system
hotplug: manage the adding/removal of hardwarel
modinfo module_name
modprobe --show-depends module_name
or cat /lib/modules/kernel-version/modules.dep 

Building kernel :
install git version control system:
$ sudo apt-get install git-core
$ sudo apt-get install libncurses5-dev
The kernel image and initrd and config info
ls –al /boot
•	vmlinuz-2.6.35-kwlug+: The compressed, bootable kernel image
•	initrd.img-2.6.35-kwlug+: The initial ram disk -- an early root filesystem that allows your kernel to bootstrap and get essential device drivers to get to the final, official root filesystem
•	config-2.6.35-kwlug+: The record of the configuration
parameters for that kernel
The kernel-specific loadable modules
$ ls /lib/modules
The GRUB configuration file
$ cat /boot/grub/grub.cfg
Getting the kernel source
$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git linux-2.6
You do not need root/superuser access to download a kernel source tree, or to configure it, or to build it. You will need root privilege only to install the final product(s) in /boot and to upgrade the GRUB configuration file. But until then, you have no need for root privilege
The configuration process
make help

pre-defined configurations
$ find arch -name "*defconfig"

To configure manually :
$ make menuconfig

To use existing kernel configuration 
$ cp /boot/config-2.6.32-22-generic .config
Naming your new kernel
Vim Makefile :
VERSION = 2
PATCHLEVEL = 6
SUBLEVEL = 35
EXTRAVERSION = -rc2
NAME = Sheep on Meth
To see running kernel version command : uname –r 
Doing the build
$ make
Installing your new kernel and modules
What needs to be done : 
•  Install the new (compressed) kernel image into the /boot directory so that GRUB can find it at boot time 
•  Create (somehow) a new initrd initial ram disk that goes along with that kernel to support the early part of the boot process 
•  Install all of the newly-built modules, which should show up under a new directory under the /lib/modules directory 
•  Finally, run whatever command is appropriate to update the GRUB configuration file on your system to add entries for your new kernel so it can be selected from the GRUB menu at system startup
$ sudo make modules_install
Or for stripted file so that modules will take less space.
$ make INSTALL_MOD_STRIP=1 modules_install
Or after installed kernel to stiped form :
$ find <<modules_folder>> -name "*.ko" -exec strip --strip-unneeded {}\;
$ sudo make install
$ sudo update-initramfs -c -k 2.6.35-crash+
$ sudo update-grub
make-kpkg that allows you to take your build results and turn it into a dpkg-installable package
Take a deep breath and ... reboot!
remove every vestige of your build:
$ make distclean
Linux Kernel Modules - Load, Unload, Configure
Linux allows the Kernel to be configured at run time, to enable or disable different services as you see fit. This way you don't have to compile a monolithic kernel, and can save some memory usage. Some modules you'll only need for a short time, others you'll need all the time. You can configure your Linux machine to load kernel modules on startup so you don't have to remember to do that when (if) you reboot. 
Module Commands
There are a few commands that allow you to maniuplate the kernel. Each is quickly described below, for more information say `man [command]`. 

depmod - handle dependency descriptions for loadable kernel modules.
insmod - install loadable kernel module.
lsmod - list loaded modules.
modinfo - display information about a kernel module.
modprobe - high level handling of loadable modules.
•	rmmod - unload loadable modules.
Using Module Commands
# Show the module dependencies.
depmod -n

# Install some module
insmod --autoclean [modnam]

# This lists all currently loaded modules, lsmod takes no useful parameters
lsmod or
sudo modeprobe -l

# Display information about module eepro100
modinfo --author --description --parameters eepro100

# Removing a module (don't use the example)
rmmod --all --stacks ip_tables

# how to know thw dependencies of kernel module :
Lsmod ,modinfo  module,  vim /lib/modules/version/modules.dep 
sudo modprobe --show-depends modulename

To display the configuration of a particular module: 
$ modprobe -c | grep module_name
Module Configuration Files
The kernel modules can use two different methods of automatic loading. The first method (modules.conf) is my preferred method, but you can do as you please. 
modules.conf - This method load the modules before the rest of the services, I think before your computer chooses which runlevel to use
rc.local - Using this method loads the modules after all other services are started
Using 'modules.conf' will require you to say `man 5 modules.conf`. Using 'rc.local' requires you to place the necessary commands (see above) in the right order. 
Sample modules.conf
# modules.conf - configuration file for loading kernel modules
# Create a module alias parport_lowlevel to parport_pc
alias parport_lowlevel parport_pc
# Alias eth0 to my eepro100 (Intel Pro 100)
alias eth0 eepro100
# Execute /sbin/modprobe ip_conntrack_ftp after loading ip_tables
post-install ip_tables /sbin/modprobe ip_conntrack_ftp
# Execute /sbin/modprobe ip_nat_ftp after loading ip_tables
post-install ip_tables /sbin/modprobe ip_nat_ftp


Sample rc.local
#!/bin/sh
#
# This script will be executed *after* all the other init scripts.
# You can put your own initialization stuff in here if you don't
# want to do the full Sys V style init stuff.

/sbin/insmod ip_tables
/sbin/modprobe ip_conntrack_ftp
/sbin/modprobe ip_nat_ftp
Conclusion
You should see/know that modules are necessary. They can be loaded via 'modules.conf' or 'rc.local', but 'modules.conf' load them first and 'rc.local' loads them last. Using the various module commands you can add, remove, list or get information about modules. 
Enabling in Kernel Config For Tracing
To enable the dump_stack() function in the kernel config the following options must be set. You can use make menuconfig or make xconfig to do this. 
1.	Kernel hacking -> Kernel debugging
2.	Kernel hacking -> Verbose kernel error messages
Enabling these two options will change the dump_stack() function from a do nothing function to dumping the stack. 
You need to rebuild your Linux kernel image after enabling these options. 
Ftrace :	http://www.opensourceforu.com/2010/11/kernel-tracing-with-ftrace-part-1/
Debugfs:	http://www.opensourceforu.com/2010/10/debugging-linux-kernel-with-debugfs/ 
Gdb:	https://www.linux.com/learn/linux-training/33991-the-kernel-newbie-corner-kernel-and-module-debugging-with-gdb
http://www.elinux.org/Debugging_The_Linux_Kernel_Using_Gdb 
Kgdb:	http://www.opensourceforu.com/2011/09/kernel-space-debuggers-in-linux/ 









systemctl get-default 
systemctl --failed
systemctl list-units --type=target -all
systemctl --no-pager
systemctl list-dependencies rescue.target
systemctl status 
systemctl show   
systemctl daemon-reload
systemd-analyze critical-chain
systemd-analyze dot
systemd-analyze plot > something.svg
journalctl
systemd-cgtop
systemd-cgls
 
mount -t type dev dir
sg_start --eject /dev/sr0
sg_start --load /dev/scd0

gernel commands :
df -ah
du -sch /*
grep -nri string dir
grep -rnw 'directory' -e "pattern"
find . | grep '\.xml' | xargs grep -in start_bosch.service
find . -iname *str* | grep str
find dir -iname file
find dir -type f -perm 0777 -print -exec chmod 644 {} \;
ps -auxf
wheris and whatis
ln -s targetfile linkname
sudo mount -o remount,rw /partition/identifier /mount/point

strings 
Listing the System's Start-Up Time : systemd-analyze
Listing the Services Start-Up Time : systemd-analyze blame
Services Start-Up Time Graphics : systemd-analyze plot > jupiter.example.com-startup.svg
chown owner:group  dir/

perl -d ( which build.pl ) --lsim component name
perl ${_SWNAVIROOT}/tools/prj_dnl/prepare_lsim.pl

related to git 
git command --help
git clone gitdir lodir
git branch -a
git checkout brname
git pull
git reset --soft <commit>
git clean -f   to remove untracked file
git reset --soft HEAD^ : Removing the last commit but changes in file will be there.
git reset --hard @{u}  : Discarding all local commits on this branch but changes you will not get back
git reset --hard HEAD^ : Removing the last commit
git reset --hard HEAD~2 : remove last two commit
git log --pretty=oneline
git log -p -1 hashvalue
git show pointer
git add file or dir
git status
git commit -s 
git commit --amend -m "message"   : Updating the last commit's contents or commit message
git format-patch -n <commit>
git push ssh://dus5cob@fe0vm142.de.bosch.com:29418/fastboot-userland-imx.git HEAD:refs/for/development-38
git apply --stat patch
git apply --check patch
git commit --amend
git am --signoff < patch
gitk --all --date-order  or git log --all or git log --graph --decorate --oneline --all  to know the SHA (hash ID)of commit
git diff commit1 commit2
git checkout -- filename undo or discard the previous changes of a file
git log --pretty=format:"%ci (%h): %s" rootfs_lsim or dir to know number of patches applied to a dir or project
git log --pretty=format:"%ci (%h): %s" rootfs or git log --pretty=oneline rootfs_lsim
git stash  to remove 


git clean -f to remove untracked file

BSP
1.git checkout -b branchname
2.export PATH=/opt/tooling/CodeSourcery/Sourcery_CodeBench_for_ARM_GNU_Linux/bin/:$PATH
3.export ARCH=arm
export CROSS_COMPILE=arm-none-linux-gnueabi-
4. make configfile
5 make -j8

run time debugging : userspace
stat filename
strace -e open ls
lsof | morel
htop 
ps -auxf
readelf
nm
size
objdump
ltrace
strings
strip
ld
file
ldd
ldd $(which nm)
ldconfig -v to print all shared object library and path
ltrace -S -tt ./executable
to get debugging help
LD_DEBUG=help  dynamic executable
to get all info
LD_DEBUG=all  dynamic executable
LD_DEBUG=libs,versions testApp -m
to take output in a file
LD_DEBUG_OUTPUT=sym.log LD_DEBUG=bindings  dynamic executable 

gdb thread debugging

gcc -g -o executable name filename  -lpthread
./exectablename
ps -aux | grep executable name
gdb -pid pidnumber 

gdbserver
target remote 172.17.0.11:45
file /home/dus5cob/bosch/dus5cob_AI_PRJ_G3G_LINUX_15.0F22.vws_GEN/ai_projects/generated/bin/gen3x86make/debug/procoedt_out.out
set sysroot /opt/tooling/x86-staging/DI_BINARY_REPOSITORY_IMX6_LINUX_15.0F27.1/
set solib-search-path /opt/tooling/x86-staging/DI_BINARY_REPOSITORY_IMX6_LINUX_15.0F27.1/lib/
info sharedlibrary
info sources
file  sharedobject [to check whether unstriped file have debugging symboles or not]
set verbose on
break oedt_Cd_TestFuncs.c:OEDT_CD_T151

file /opt/tooling/x86-staging/DI_BINARY_REPOSITORY_IMX6_LINUX_15.0F27.1/lib/libuuid.so.1.3.0
readelf --debug-dump=info /opt/tooling/x86-staging/DI_BINARY_REPOSITORY_IMX6_LINUX_15.0F27.1/lib/libuuid.so.1.3.0

objdump --syms ... | grep debug
objdump --debugging libinspected.so

gcc -g -o main main.c
objcopy --only-keep-debug main main.debug
strip --strip-debug --strip-unneeded main
objcopy --add-gnu-debuglink main.debug main


gdb -s main.debug -e main
or
gdb
(gdb) exec-file main
(gdb) symbol-file main.debug

Table 1. Most commonly used commands for gdb
Command	Description	Example
help			List classes of commands	help - to list classes of commands
help breakpoints - 		list commands belonging to breakpoints class
help break - 		description of break command
run				Start the debugged program	 
kill			Kill execution of program being debugged	Usually it is used when the execution line has been passed where the code you want to debug. Issue kill, reset the breakpoints, and run the program again to start over.
		
cont			Continue execution of the debugged application after a breakpoint, exception, or step.	 
info break		Display the current breakpoints or watchpoints.	 
break			Set breakpoint at specified line or function	break 93 if i=8 - to stop the program execution at line 93 when the variable i is equal to 8.
Step			Step the program until it reaches a different source line. You can use s to abbreviate the step command.	 
Next			Like the step command, except it does not "step into" subroutines	 
print			Print the value of a variable or an expression	print pointer - print the content of variable pointer.
print *pointer - 		print the content of the data structure the pointer is pointing to.
delete			Delete some breakpoints or auto-display expressions	delete 1 - to delete breakpoint number 1. The breakpoints can be displayed by info break.
watch			Set a watchpoint for an expression. A watchpoint stops execution of your program whenever the value of an expression changes.	 
where			Print backtrace of all stack frames	where - with no arguments, dumps the stack of the current thread.
where all - 		dumps the stack of all threads in the current thread group.
where threadindex - 		dumps the stack of the specified thread.
attach			Start viewing an already running process	attach <process_id> - attach the process with process_id. process_id can be found by the ps command.
info thread		Show currently running threads	 
thread apply threadno command			Run gdb command on a thread	thread apply 3 where - run the where command on the thread 3
Thread threadno			Select a thread to be the current thread

valgrind
 g++ -g -Wall -Wextra -pedantic test1.cpp -o test1
valgrind -v --tool=memcheck --leak-check=yes --leak-check=full --show-reachable=yes --num-callers=20 --track-fds=yes --track-origins=yes --num-callers=50 --db-attach=yes  ./test

shared library creation:

g++ -ggdb -fPIC -shared lib.cpp -o libTest.so
g++ -ggdb main.cpp libTest.so -o testApp -Wl,--rpath='$ORIGIN'


Tip: Never move a file in the kernel source unless you know what you are doing. Otherwise, the compilation with fail due to a "missing" file.

The Linux kernel folder structure has remained relatively constant. The kernel developers have made some modifications, but overall, this setup is the same throughout all kernel versions. The driver folder's layout also remains about the same


The Permission Groups used are:
u - Owner
g - Group
o or a - All Users
chmod u=rwx,g=rx,o=r file or chmod 754 file
r=4, w=2, x=1.
-rwxr-xr-x 


The special permissions flag can be marked with any of the following: 
_ - no special permissions
d - directory
l - The file or directory is a symbolic link
s - This indicated the setuid/setgid permissions. This is not set displayed  in the special permission part of the permissions display, but is represented as a s in the read portion of the owner or group permissions.
t - This indicates the sticky bit permissions. This is not set displayed in the special permission part of the permissions display, but is represented as a t in the executable portion of the all users permissions

how the optimal permissions should be set.
home directories - The users\' home directories are important because you do not want other users to be able to view and modify the files in another user\'s documents of desktop. To remedy this you will want the directory to have the drwx______ (700) permissions, so lets say we want to enforce the correct permissions on the user user1\'s home directory that can be done by issuing the command chmod 700 /home/user1.
bootloader configuration files - If you decide to implement password to boot specific operating systems then you will want to remove read and write permissions from the configuration file from all users but root. To do you can change the permissions of the file to 700.
system and daemon configuration files - It is very important to restrict rights to system and daemon configuration files to restrict users from editing the contents, it may not be advisable to restrict read permissions, but restricting write permissions is a must. In these cases it may be best to modify the rights to 644.
firewall scripts - It may not always be necessary to block all users from reading the firewall file, but it is advisable to restrict the users from writing to the file. In this case the firewall script is run by the root user automatically on boot, so all other users need no rights, so you can assign the 700 permissions.

Change the ownership to newuser and group to newgroup for all of the files and directories in current directory, and all subdirectories (recursively).
 $ chown -R newuser:newgroup .

Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always in that order.
The first three stages apply to an individual source file, and end by producing an object file;
linking combines all the object files (those newly compiled, and those specified as input) into an executable file.
For any given input file, the file name suffix determines what kind of compilation is done (some of these apply only to TIGCC):

file.c C source code which must be preprocessed. 
file.s GNU Assembler code. 
file.S GNU Assembler code which must be preprocessed. 
file.asm A68k Assembler code. 
file.o COFF object file to be linked using ld. 
file.a Static library (function archive) to be linked using ld.

-c  Compile or assemble the source files, but do not link. The linking stage simply is not done. The ultimate output is in the form of an object file for each source file.
By default, the object file name for a source file is made by replacing the suffix .c, .i, .s, etc., with .o.
Unrecognized input files, not requiring compilation or assembly, are ignored. 

-S  Stop after the stage of compilation proper; do not assemble. The output is in the form of an assembler code file for each non-assembler input file specified.
By default, the assembler file name for a source file is made by replacing the suffix .c, .i, etc., with .s.Input files that don't require compilation are ignored. 

-E  Stop after the preprocessing stage; do not run the compiler proper. The output is in the form of preprocessed source code, which is sent to the standard output.
Input files which don't require preprocessing are ignored. 

-o file
Place output in file file. This applies regardless to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.
Since only one output file can be specified, it does not make sense to use '-o' when compiling more than one input file, unless you are producing an executable file as output.
If '-o' is not specified, the default is to put an executable file in a.out, the object file for source.suffix in source.o, its assembler file in source.s, and all preprocessed C source on standard output. 

-v  Print (on standard error output) the commands executed to run the stages of compilation. Also print the version number of the compiler driver program and of the preprocessor and the compiler proper. 

-Q  Makes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes

-static   On systems that support dynamic linking, this prevents linking with the shared libraries. On other systems, this option has no effect.
-shared   Produce a shared object which can then be linked with other objects to form an executable. Not all systems support this option. For predictable results, you must also specify the same set of options used for compilation (-fpic, -fPIC, or model suboptions) when you specify this linker option.1 
    
gcc [options] [source files] [object files] [-o output file]
GCC options :

GCC main options:
option 	description
gcc -c 	compile source files to object files without linking
gcc -Dname[=value] 	define a preprocessor macro
gcc -fPIC 	generate position independent code for shared libraries
gcc -glevel 	generate debug information to be used by GDB
gcc -Idir 	add include directory of header files
gcc -llib 	link with library file
gcc -Ldir 	look in directory for library files
gcc -o output file 	write build output to output file
gcc -Olevel 	optimize for code size and execution time
gcc -shared 	generate shared object file for shared library
gcc -Uname 	undefine a preprocessor macro
gcc -w 	disable all warning messages
gcc -Wall 	enable all warning messages
gcc -Wextra 	enable extra warning messages
gcc -g for gdb debugging

-ar  Create an archive (a static library) instead of a program. The resulting file will have an .a ending. 



$ gcc  [-o outfile] [source files] [-llibname] [-Ldir] [-Iincludedir] [options]  
eg  /opt/tooling/bosch/RB_20140425/symphony-ivi-2.6.34/tools/tools/i686-bosch-linux-gnu/bin/i686-bosch-linux-gnu-g++ -o test.out test.cpp -lX11 -L/usr/include/lib -I /usr/Include
